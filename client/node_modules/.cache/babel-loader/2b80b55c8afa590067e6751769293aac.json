{"ast":null,"code":"import { setUserDataLogin, setUserDataToken, setIsLogin, reset } from './hooks';\nimport Api from '../api/Api';\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(config => {\n  console.log(config);\n  return config;\n});\nexport { axiosInstance }; // export const interceptor = () => {\n//     const api = new Api({})\n//     const token = cookies.get('token')\n//     const refreshToken = cookies.get('refreshToken')\n//     api.interceptors.request.use(async config => {\n//         const currentDate = new Date()\n//         const decodeToken: JWTDecode = jwtDecode(token)\n//         if(decodeToken.exp * 1000 < currentDate.getTime()){\n//             const refresh = await new Api({ refreshToken }).post('/token')\n//             cookies.set('token', refresh.token)\n//             config.headers['Authorization'] = `Bearer ${refresh.token}`\n//         }\n//         return config\n//     }, error => {\n//         return Promise.reject(error)\n//     })\n// }\n\nexport const interceptor = async () => {\n  const refreshToken = cookies.get('refreshToken');\n  const token = cookies.get('token');\n\n  try {\n    const currentTime = new Date();\n    const decodeToken = jwtDecode(token);\n\n    if (decodeToken.exp * 1000 < currentTime.getTime()) {\n      const refresh = await new Api({\n        refreshToken\n      }).post('/token');\n      cookies.set('token', refresh.token);\n      return `Bearer ${refresh.token}`;\n    }\n\n    return token;\n  } catch (error) {\n    console.log(`${error}`);\n  }\n};\nexport const cookies = new Cookies();\nexport const mapStateToProps = state => ({\n  persist: state.persist,\n  temporer: state.temporer\n});\nexport const mapDispatchToProps = dispatch => {\n  return {\n    setUserDataLogin: userData => dispatch(setUserDataLogin(userData)),\n    setUserDataToken: userData => dispatch(setUserDataToken(userData)),\n    setIsLogin: data => dispatch(setIsLogin(data)),\n    reset: () => dispatch(reset())\n  };\n};","map":{"version":3,"sources":["/home/inim/Documents/Data/DESA/DOMAS/client/src/app/functions.ts"],"names":["setUserDataLogin","setUserDataToken","setIsLogin","reset","Api","Cookies","jwtDecode","axios","axiosInstance","create","baseURL","process","env","REACT_APP_BASE_URL","withCredentials","headers","interceptors","request","use","config","console","log","interceptor","refreshToken","cookies","get","token","currentTime","Date","decodeToken","exp","getTime","refresh","post","set","error","mapStateToProps","state","persist","temporer","mapDispatchToProps","dispatch","userData","data"],"mappings":"AAAA,SACIA,gBADJ,EACsBC,gBADtB,EACwCC,UADxC,EAEIC,KAFJ,QAGO,SAHP;AAKA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAqC,OAArC;AAGA,MAAMC,aAA4B,GAAID,KAAK,CAACE,MAAN,CAAa;AAC/CC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBAD0B;AAE/CC,EAAAA,eAAe,EAAE,IAF8B;AAG/CC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX;AAHsC,CAAb,CAAtC;AAQAP,aAAa,CAACQ,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuCC,MAAM,IAAI;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOA,MAAP;AACH,CAHD;AAKA,SAASX,aAAT,G,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMc,WAAW,GAAG,YAAY;AACnC,QAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAY,cAAZ,CAArB;AACA,QAAMC,KAAK,GAAGF,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAd;;AACA,MAAI;AACA,UAAME,WAAW,GAAG,IAAIC,IAAJ,EAApB;AACA,UAAMC,WAAsB,GAAGvB,SAAS,CAACoB,KAAD,CAAxC;;AACA,QAAIG,WAAW,CAACC,GAAZ,GAAmB,IAApB,GAA4BH,WAAW,CAACI,OAAZ,EAA/B,EAAqD;AACjD,YAAMC,OAAY,GAAG,MAAM,IAAI5B,GAAJ,CAAQ;AAAEmB,QAAAA;AAAF,OAAR,EAA0BU,IAA1B,CAA+B,QAA/B,CAA3B;AACAT,MAAAA,OAAO,CAACU,GAAR,CAAY,OAAZ,EAAqBF,OAAO,CAACN,KAA7B;AACA,aAAQ,UAASM,OAAO,CAACN,KAAM,EAA/B;AACH;;AACD,WAAOA,KAAP;AACH,GATD,CASE,OAAOS,KAAP,EAAc;AACZf,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEc,KAAM,EAArB;AACH;AACJ,CAfM;AAiBP,OAAO,MAAMX,OAAO,GAAG,IAAInB,OAAJ,EAAhB;AAEP,OAAO,MAAM+B,eAAe,GAAIC,KAAD,KAA0B;AACrDC,EAAAA,OAAO,EAAED,KAAK,CAACC,OADsC;AAErDC,EAAAA,QAAQ,EAAGF,KAAK,CAACE;AAFoC,CAA1B,CAAxB;AAKP,OAAO,MAAMC,kBAAkB,GAAIC,QAAD,IAAyC;AACvE,SAAO;AACHzC,IAAAA,gBAAgB,EAAG0C,QAAD,IAAwBD,QAAQ,CAACzC,gBAAgB,CAAC0C,QAAD,CAAjB,CAD/C;AAEHzC,IAAAA,gBAAgB,EAAGyC,QAAD,IAAwBD,QAAQ,CAACxC,gBAAgB,CAACyC,QAAD,CAAjB,CAF/C;AAGHxC,IAAAA,UAAU,EAAGyC,IAAD,IAAmBF,QAAQ,CAACvC,UAAU,CAACyC,IAAD,CAAX,CAHpC;AAIHxC,IAAAA,KAAK,EAAE,MAAMsC,QAAQ,CAACtC,KAAK,EAAN;AAJlB,GAAP;AAMH,CAPM","sourcesContent":["import { \n    setUserDataLogin, setUserDataToken, setIsLogin,\n    reset\n} from './hooks' \nimport { StateToProps, DispatchToProps, UserData, JWTDecode, Req } from '../interface/Interfaces'\nimport Api from '../api/Api'\nimport Cookies from 'universal-cookie'\nimport jwtDecode from 'jwt-decode'\nimport axios, { AxiosInstance } from 'axios'\n\n\nconst axiosInstance: AxiosInstance =  axios.create({\n    baseURL: process.env.REACT_APP_BASE_URL,\n    withCredentials: true,\n    headers: {\n        \"Content-Type\": \"application/json\"   \n    }\n})\n\naxiosInstance.interceptors.request.use(config => {\n    console.log(config)\n    return config\n})\n\nexport { axiosInstance }\n\n\n// export const interceptor = () => {\n//     const api = new Api({})\n//     const token = cookies.get('token')\n//     const refreshToken = cookies.get('refreshToken')\n//     api.interceptors.request.use(async config => {\n//         const currentDate = new Date()\n//         const decodeToken: JWTDecode = jwtDecode(token)\n//         if(decodeToken.exp * 1000 < currentDate.getTime()){\n//             const refresh = await new Api({ refreshToken }).post('/token')\n//             cookies.set('token', refresh.token)\n//             config.headers['Authorization'] = `Bearer ${refresh.token}`\n//         }\n//         return config\n//     }, error => {\n//         return Promise.reject(error)\n//     })\n// }\n\nexport const interceptor = async () => {\n    const refreshToken = cookies.get('refreshToken')\n    const token = cookies.get('token')\n    try {\n        const currentTime = new Date()\n        const decodeToken: JWTDecode = jwtDecode(token)\n        if((decodeToken.exp! * 1000) < currentTime.getTime()){\n            const refresh: Req = await new Api({ refreshToken }).post('/token')\n            cookies.set('token', refresh.token)\n            return `Bearer ${refresh.token}`\n        }\n        return token\n    } catch (error) {\n        console.log(`${error}`)\n    }\n}\n\nexport const cookies = new Cookies()\n\nexport const mapStateToProps = (state: StateToProps) => ({\n    persist: state.persist,\n    temporer : state.temporer\n})\n\nexport const mapDispatchToProps = (dispatch: Function): DispatchToProps => {\n    return {\n        setUserDataLogin: (userData: UserData) => dispatch(setUserDataLogin(userData)),\n        setUserDataToken: (userData: UserData) => dispatch(setUserDataToken(userData)),\n        setIsLogin: (data: boolean) => dispatch(setIsLogin(data)),\n        reset: () => dispatch(reset())\n    }\n}"]},"metadata":{},"sourceType":"module"}