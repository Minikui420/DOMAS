{"ast":null,"code":"import { setUserDataLogin, setUserDataToken, setIsLogin, reset } from './hooks';\nimport Api from '../api/Api';\nimport jwtDecode from 'jwt-decode';\nimport Cookies from 'universal-cookie';\nexport const interceptor = () => {\n  const api = new Api({});\n  const token = cookies.get('token');\n  const refreshToken = cookies.get('refreshToken');\n  api.interceptors.request.use(async config => {\n    const currentDate = new Date();\n    const decodeToken = jwtDecode(token);\n\n    if (decodeToken.exp * 1000 < currentDate.getTime()) {\n      const refresh = await new Api({\n        refreshToken\n      }).post('/token');\n      cookies.set('token', refresh.token);\n      config.headers['Authorization'] = `Bearer ${refresh.token}`;\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n};\nexport const cookies = new Cookies();\nexport const mapStateToProps = state => ({\n  persist: state.persist,\n  temporer: state.temporer\n});\nexport const mapDispatchToProps = dispatch => {\n  return {\n    setUserDataLogin: userData => dispatch(setUserDataLogin(userData)),\n    setUserDataToken: userData => dispatch(setUserDataToken(userData)),\n    setIsLogin: data => dispatch(setIsLogin(data)),\n    reset: () => dispatch(reset())\n  };\n};","map":{"version":3,"sources":["/home/inim/Documents/Data/DESA/DOMAS/client/src/app/functions.ts"],"names":["setUserDataLogin","setUserDataToken","setIsLogin","reset","Api","jwtDecode","Cookies","interceptor","api","token","cookies","get","refreshToken","interceptors","request","use","config","currentDate","Date","decodeToken","exp","getTime","refresh","post","set","headers","error","Promise","reject","mapStateToProps","state","persist","temporer","mapDispatchToProps","dispatch","userData","data"],"mappings":"AAAA,SACIA,gBADJ,EACsBC,gBADtB,EACwCC,UADxC,EAEIC,KAFJ,QAGO,SAHP;AAKA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,QAAMC,GAAG,GAAG,IAAIJ,GAAJ,CAAQ,EAAR,CAAZ;AACI,QAAMK,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAd;AACA,QAAMC,YAAY,GAAGF,OAAO,CAACC,GAAR,CAAY,cAAZ,CAArB;AACAH,EAAAA,GAAG,CAACK,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6B,MAAMC,MAAN,IAAgB;AACzC,UAAMC,WAAW,GAAG,IAAIC,IAAJ,EAApB;AACA,UAAMC,WAAsB,GAAGd,SAAS,CAACI,KAAD,CAAxC;;AACA,QAAGU,WAAW,CAACC,GAAZ,GAAkB,IAAlB,GAAyBH,WAAW,CAACI,OAAZ,EAA5B,EAAkD;AAC9C,YAAMC,OAAO,GAAG,MAAM,IAAIlB,GAAJ,CAAQ;AAAEQ,QAAAA;AAAF,OAAR,EAA0BW,IAA1B,CAA+B,QAA/B,CAAtB;AACAb,MAAAA,OAAO,CAACc,GAAR,CAAY,OAAZ,EAAqBF,OAAO,CAACb,KAA7B;AACAO,MAAAA,MAAM,CAACS,OAAP,CAAe,eAAf,IAAmC,UAASH,OAAO,CAACb,KAAM,EAA1D;AACH;;AACD,WAAOO,MAAP;AACH,GATD,EASGU,KAAK,IAAI;AACR,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,GAXD;AAYP,CAhBM;AAkBP,OAAO,MAAMhB,OAAO,GAAG,IAAIJ,OAAJ,EAAhB;AAEP,OAAO,MAAMuB,eAAe,GAAIC,KAAD,KAA0B;AACrDC,EAAAA,OAAO,EAAED,KAAK,CAACC,OADsC;AAErDC,EAAAA,QAAQ,EAAGF,KAAK,CAACE;AAFoC,CAA1B,CAAxB;AAKP,OAAO,MAAMC,kBAAkB,GAAIC,QAAD,IAAyC;AACvE,SAAO;AACHlC,IAAAA,gBAAgB,EAAGmC,QAAD,IAAwBD,QAAQ,CAAClC,gBAAgB,CAACmC,QAAD,CAAjB,CAD/C;AAEHlC,IAAAA,gBAAgB,EAAGkC,QAAD,IAAwBD,QAAQ,CAACjC,gBAAgB,CAACkC,QAAD,CAAjB,CAF/C;AAGHjC,IAAAA,UAAU,EAAGkC,IAAD,IAAmBF,QAAQ,CAAChC,UAAU,CAACkC,IAAD,CAAX,CAHpC;AAIHjC,IAAAA,KAAK,EAAE,MAAM+B,QAAQ,CAAC/B,KAAK,EAAN;AAJlB,GAAP;AAMH,CAPM","sourcesContent":["import { \n    setUserDataLogin, setUserDataToken, setIsLogin,\n    reset\n} from './hooks' \nimport { StateToProps, DispatchToProps, UserData, JWTDecode } from '../interface/Interfaces'\nimport Api from '../api/Api'\nimport jwtDecode from 'jwt-decode'\nimport Cookies from 'universal-cookie'\n\nexport const interceptor = () => {\n    const api = new Api({})\n        const token = cookies.get('token')\n        const refreshToken = cookies.get('refreshToken')\n        api.interceptors.request.use(async config => {\n            const currentDate = new Date()\n            const decodeToken: JWTDecode = jwtDecode(token)\n            if(decodeToken.exp * 1000 < currentDate.getTime()){\n                const refresh = await new Api({ refreshToken }).post('/token')\n                cookies.set('token', refresh.token)\n                config.headers['Authorization'] = `Bearer ${refresh.token}`\n            }\n            return config\n        }, error => {\n            return Promise.reject(error)\n        })\n}\n\nexport const cookies = new Cookies()\n\nexport const mapStateToProps = (state: StateToProps) => ({\n    persist: state.persist,\n    temporer : state.temporer\n})\n\nexport const mapDispatchToProps = (dispatch: Function): DispatchToProps => {\n    return {\n        setUserDataLogin: (userData: UserData) => dispatch(setUserDataLogin(userData)),\n        setUserDataToken: (userData: UserData) => dispatch(setUserDataToken(userData)),\n        setIsLogin: (data: boolean) => dispatch(setIsLogin(data)),\n        reset: () => dispatch(reset())\n    }\n}"]},"metadata":{},"sourceType":"module"}