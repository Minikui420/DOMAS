{"ast":null,"code":"import Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport axios from 'axios';\nimport { setUserDataLogin, setUserDataToken, setIsLogin, setPath, setActivity, setKKData, setToResult, reset, setLocalPath } from './hooks';\nconst timer = 864 * 100000 * 7; // 7 days\n\nexport const expires = new Date(new Date().getTime() + timer);\nexport const cookies = new Cookies(); // COOKIE DECODER\n\nexport const cookieDecoder = () => {\n  const token = cookies.get(`token`);\n\n  if (token) {\n    const decode = jwtDecode(token);\n    return decode;\n  }\n}; // AXIOS\n\nconst url = process.env.REACT_APP_BASE_URL;\naxios.defaults.withCredentials = true;\nconst axiosInstance = axios.create({\n  baseURL: url,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(async config => {\n  const token = await interceptor();\n\n  if (token || token !== undefined) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n    cookies.set('token', token, {\n      expires\n    });\n    return config;\n  }\n\n  return config;\n});\nexport { axiosInstance };\nexport const interceptor = async () => {\n  const refreshToken = cookies.get('refreshToken');\n  const getToken = cookies.get('token');\n\n  try {\n    if (getToken || getToken !== undefined) {\n      const currentTime = new Date();\n      const {\n        exp\n      } = jwtDecode(getToken);\n\n      if (exp * 1000 < currentTime.getTime()) {\n        const dataResponse = await axios.post(`${url}/token`, {\n          refreshToken\n        });\n        const {\n          token\n        } = dataResponse.data;\n        return token;\n      }\n\n      return getToken;\n    }\n  } catch (error) {\n    console.log(`${error}`);\n  }\n}; // STATE AND PROPS\n\nexport const mapStateToProps = state => ({\n  persist: state.persist,\n  temporer: state.temporer\n});\nexport const mapDispatchToProps = dispatch => {\n  return {\n    setUserDataLogin: userData => dispatch(setUserDataLogin(userData)),\n    setUserDataToken: userData => dispatch(setUserDataToken(userData)),\n    setLocalPath: data => dispatch(setLocalPath(data)),\n    setToResult: data => dispatch(setToResult(data)),\n    setActivity: data => dispatch(setActivity(data)),\n    setIsLogin: data => dispatch(setIsLogin(data)),\n    setKKData: data => dispatch(setKKData(data)),\n    setPath: path => dispatch(setPath(path)),\n    reset: () => dispatch(reset())\n  };\n};","map":{"version":3,"sources":["/home/inim/Documents/Data/DESA/DOMAS/client/src/app/functions.ts"],"names":["Cookies","jwtDecode","axios","setUserDataLogin","setUserDataToken","setIsLogin","setPath","setActivity","setKKData","setToResult","reset","setLocalPath","timer","expires","Date","getTime","cookies","cookieDecoder","token","get","decode","url","process","env","REACT_APP_BASE_URL","defaults","withCredentials","axiosInstance","create","baseURL","headers","interceptors","request","use","config","interceptor","undefined","set","refreshToken","getToken","currentTime","exp","dataResponse","post","data","error","console","log","mapStateToProps","state","persist","temporer","mapDispatchToProps","dispatch","userData","path"],"mappings":"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","sourcesContent":["import Cookies from 'universal-cookie'\nimport jwtDecode from 'jwt-decode'\nimport axios, { AxiosInstance } from 'axios'\nimport { \n    StateToProps, DispatchToProps, UserData, \n    JWTDecode, DataResponse, KKData \n} from '../interface/Interfaces'\nimport { \n    setUserDataLogin, setUserDataToken, setIsLogin,\n    setPath, setActivity, setKKData, setToResult, reset,\n    setLocalPath\n} from './hooks' \n\n\n\nconst timer: number = (864 * 100000) * 7 // 7 days\nexport const expires = new Date(new Date().getTime() + timer)\nexport const cookies = new Cookies()\n\n// COOKIE DECODER\n\nexport const cookieDecoder = () => {\n    const token = cookies.get(`token`)\n    if(token){\n        const decode: UserData = jwtDecode(token)\n        return decode\n    }\n}\n\n// AXIOS\n\nconst url = process.env.REACT_APP_BASE_URL\naxios.defaults.withCredentials = true\n\nconst axiosInstance: AxiosInstance =  axios.create({\n    baseURL: url,\n    headers: {\n        \"Content-Type\": \"application/json\"   \n    }\n})\naxiosInstance.interceptors.request.use(async config => {\n    const token = await interceptor()\n    if(token || token !== undefined){\n        config.headers['Authorization'] = `Bearer ${token}`\n        cookies.set('token', token, { expires })\n        return config\n    }\n    return config\n})\n\nexport { axiosInstance }\n\nexport const interceptor = async () => {\n    const refreshToken = cookies.get('refreshToken')\n    const getToken = cookies.get('token')\n    try {\n        if(getToken || getToken !== undefined){\n            const currentTime = new Date()\n            const { exp }: JWTDecode = jwtDecode(getToken)\n            if((exp! * 1000) < currentTime.getTime()){\n                const dataResponse: DataResponse = await axios.post(`${url}/token`, { refreshToken })\n                const { token } = dataResponse.data\n                return token\n            }\n            return getToken\n        }\n    } catch (error) {\n        console.log(`${error}`)\n    }\n}\n\n// STATE AND PROPS\n\nexport const mapStateToProps = (state: StateToProps) => ({\n    persist: state.persist,\n    temporer : state.temporer\n})\n\nexport const mapDispatchToProps = (dispatch: Function): DispatchToProps => {\n    return {\n        setUserDataLogin: (userData: UserData) => dispatch(setUserDataLogin(userData)),\n        setUserDataToken: (userData: UserData) => dispatch(setUserDataToken(userData)),\n        setLocalPath: (data: string) => dispatch(setLocalPath(data)),\n        setToResult: (data: boolean) => dispatch(setToResult(data)),\n        setActivity: (data: string) => dispatch(setActivity(data)),\n        setIsLogin: (data: boolean) => dispatch(setIsLogin(data)),\n        setKKData: (data: KKData) => dispatch(setKKData(data)),\n        setPath: (path: string) => dispatch(setPath(path)),\n        reset: () => dispatch(reset())\n    }\n}"]},"metadata":{},"sourceType":"module"}