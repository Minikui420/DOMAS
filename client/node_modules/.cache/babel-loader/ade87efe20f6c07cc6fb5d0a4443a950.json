{"ast":null,"code":"import { setUserDataLogin, setUserDataToken, setIsLogin, reset } from './hooks';\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport axios from 'axios';\nconst url = process.env.REACT_APP_BASE_URL;\naxios.defaults.withCredentials = true;\nconst axiosInstance = axios.create({\n  baseURL: url,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(async config => {\n  console.log(config);\n  const token = await interceptor();\n  console.log(token); // if(token || token !== undefined){\n  //     config.headers['Authorization'] = token\n  // }\n\n  return config;\n});\nexport { axiosInstance };\nexport const cookies = new Cookies();\nexport const interceptor = async () => {\n  const refreshToken = cookies.get('refreshToken');\n  const getToken = cookies.get('token');\n\n  try {\n    if (getToken || getToken !== undefined) {\n      const currentTime = new Date();\n      const {\n        exp\n      } = jwtDecode(getToken);\n\n      if (exp * 1000 < currentTime.getTime()) {\n        const token = await axios.post(`${url}/token`, {\n          refreshToken\n        });\n        console.log(token); // if(token){\n        //     cookies.set('token',token)\n        // }\n        // return `Bearer ${ token }`\n      } // return `Bearer ${ getToken }`\n\n    }\n  } catch (error) {\n    console.log(`${error}`);\n  }\n};\nexport const mapStateToProps = state => ({\n  persist: state.persist,\n  temporer: state.temporer\n});\nexport const mapDispatchToProps = dispatch => {\n  return {\n    setUserDataLogin: userData => dispatch(setUserDataLogin(userData)),\n    setUserDataToken: userData => dispatch(setUserDataToken(userData)),\n    setIsLogin: data => dispatch(setIsLogin(data)),\n    reset: () => dispatch(reset())\n  };\n};","map":{"version":3,"sources":["/home/inim/Documents/Data/DESA/DOMAS/client/src/app/functions.ts"],"names":["setUserDataLogin","setUserDataToken","setIsLogin","reset","Cookies","jwtDecode","axios","url","process","env","REACT_APP_BASE_URL","defaults","withCredentials","axiosInstance","create","baseURL","headers","interceptors","request","use","config","console","log","token","interceptor","cookies","refreshToken","get","getToken","undefined","currentTime","Date","exp","getTime","post","error","mapStateToProps","state","persist","temporer","mapDispatchToProps","dispatch","userData","data"],"mappings":"AAAA,SACIA,gBADJ,EACsBC,gBADtB,EACwCC,UADxC,EAEIC,KAFJ,QAGO,SAHP;AAMA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAqC,OAArC;AAGA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAAxB;AACAJ,KAAK,CAACK,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AAEA,MAAMC,aAA4B,GAAIP,KAAK,CAACQ,MAAN,CAAa;AAC/CC,EAAAA,OAAO,EAAER,GADsC;AAE/CS,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX;AAFsC,CAAb,CAAtC;AAMAH,aAAa,CAACI,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,MAAMC,MAAN,IAAgB;AACnDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAMG,KAAK,GAAG,MAAMC,WAAW,EAA/B;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ,EAHmD,CAInD;AACA;AACA;;AACA,SAAOH,MAAP;AACH,CARD;AAUA,SAASP,aAAT;AAEA,OAAO,MAAMY,OAAO,GAAG,IAAIrB,OAAJ,EAAhB;AAEP,OAAO,MAAMoB,WAAW,GAAG,YAAY;AACnC,QAAME,YAAY,GAAGD,OAAO,CAACE,GAAR,CAAY,cAAZ,CAArB;AACA,QAAMC,QAAQ,GAAGH,OAAO,CAACE,GAAR,CAAY,OAAZ,CAAjB;;AACA,MAAI;AACA,QAAGC,QAAQ,IAAIA,QAAQ,KAAKC,SAA5B,EAAsC;AAClC,YAAMC,WAAW,GAAG,IAAIC,IAAJ,EAApB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAqB3B,SAAS,CAACuB,QAAD,CAApC;;AACA,UAAII,GAAG,GAAI,IAAR,GAAgBF,WAAW,CAACG,OAAZ,EAAnB,EAAyC;AACrC,cAAMV,KAAK,GAAG,MAAMjB,KAAK,CAAC4B,IAAN,CAAY,GAAE3B,GAAI,QAAlB,EAA2B;AAAEmB,UAAAA;AAAF,SAA3B,CAApB;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ,EAFqC,CAGrC;AACA;AACA;AACA;AACH,OAViC,CAWlC;;AACH;AACJ,GAdD,CAcE,OAAOY,KAAP,EAAc;AACZd,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEa,KAAM,EAArB;AACH;AACJ,CApBM;AAuBP,OAAO,MAAMC,eAAe,GAAIC,KAAD,KAA0B;AACrDC,EAAAA,OAAO,EAAED,KAAK,CAACC,OADsC;AAErDC,EAAAA,QAAQ,EAAGF,KAAK,CAACE;AAFoC,CAA1B,CAAxB;AAKP,OAAO,MAAMC,kBAAkB,GAAIC,QAAD,IAAyC;AACvE,SAAO;AACHzC,IAAAA,gBAAgB,EAAG0C,QAAD,IAAwBD,QAAQ,CAACzC,gBAAgB,CAAC0C,QAAD,CAAjB,CAD/C;AAEHzC,IAAAA,gBAAgB,EAAGyC,QAAD,IAAwBD,QAAQ,CAACxC,gBAAgB,CAACyC,QAAD,CAAjB,CAF/C;AAGHxC,IAAAA,UAAU,EAAGyC,IAAD,IAAmBF,QAAQ,CAACvC,UAAU,CAACyC,IAAD,CAAX,CAHpC;AAIHxC,IAAAA,KAAK,EAAE,MAAMsC,QAAQ,CAACtC,KAAK,EAAN;AAJlB,GAAP;AAMH,CAPM","sourcesContent":["import { \n    setUserDataLogin, setUserDataToken, setIsLogin,\n    reset\n} from './hooks' \nimport { StateToProps, DispatchToProps, UserData, JWTDecode, Req } from '../interface/Interfaces'\nimport Api from '../api/Api'\nimport Cookies from 'universal-cookie'\nimport jwtDecode from 'jwt-decode'\nimport axios, { AxiosInstance } from 'axios'\n\n\nconst url = process.env.REACT_APP_BASE_URL\naxios.defaults.withCredentials = true\n\nconst axiosInstance: AxiosInstance =  axios.create({\n    baseURL: url,\n    headers: {\n        \"Content-Type\": \"application/json\"   \n    }\n})\naxiosInstance.interceptors.request.use(async config => {\n    console.log(config)\n    const token = await interceptor()\n    console.log(token)\n    // if(token || token !== undefined){\n    //     config.headers['Authorization'] = token\n    // }\n    return config\n})\n\nexport { axiosInstance }\n\nexport const cookies = new Cookies()\n\nexport const interceptor = async () => {\n    const refreshToken = cookies.get('refreshToken')\n    const getToken = cookies.get('token')\n    try {\n        if(getToken || getToken !== undefined){\n            const currentTime = new Date()\n            const { exp }: JWTDecode = jwtDecode(getToken)\n            if((exp! * 1000) < currentTime.getTime()){\n                const token = await axios.post(`${url}/token`, { refreshToken })\n                console.log(token)\n                // if(token){\n                //     cookies.set('token',token)\n                // }\n                // return `Bearer ${ token }`\n            }\n            // return `Bearer ${ getToken }`\n        }\n    } catch (error) {\n        console.log(`${error}`)\n    }\n}\n\n\nexport const mapStateToProps = (state: StateToProps) => ({\n    persist: state.persist,\n    temporer : state.temporer\n})\n\nexport const mapDispatchToProps = (dispatch: Function): DispatchToProps => {\n    return {\n        setUserDataLogin: (userData: UserData) => dispatch(setUserDataLogin(userData)),\n        setUserDataToken: (userData: UserData) => dispatch(setUserDataToken(userData)),\n        setIsLogin: (data: boolean) => dispatch(setIsLogin(data)),\n        reset: () => dispatch(reset())\n    }\n}"]},"metadata":{},"sourceType":"module"}