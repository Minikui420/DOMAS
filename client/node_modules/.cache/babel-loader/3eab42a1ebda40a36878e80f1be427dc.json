{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { cookies } from '../app/functions';\nexport default class Api {\n  constructor(req) {\n    this.req = void 0;\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_BASE_URL,\n      withCredentials: true,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    this.interceptor = async () => {\n      const refreshToken = cookies.get('refreshToken');\n      const token = cookies.get('token');\n\n      try {\n        const currentTime = new Date();\n        const decodeToken = jwtDecode(token);\n\n        if (decodeToken.exp * 1000 < currentTime.getTime()) {\n          const refresh = await new Api({\n            refreshToken\n          }).post('/token');\n          cookies.set('token', refresh.token);\n          this.api.defaults.headers['Authorization'] = `Bearer ${refresh.token}`;\n        }\n      } catch (error) {\n        console.log(`${error}`);\n      }\n    };\n\n    this.get = async path => {\n      try {\n        const {\n          id\n        } = this.req;\n\n        switch (path) {\n          case '/home':\n            const user = await this.api.get(path);\n            return user.data;\n\n          case '/login':\n            const response = await this.api.get(path, {\n              params: {\n                id\n              }\n            });\n            return response.data;\n\n          default:\n            break;\n        }\n      } catch (error) {\n        return error.response.data;\n      }\n    };\n\n    this.post = async path => {\n      try {\n        const response = await this.api.post(path, this.req);\n        return response.data;\n      } catch (error) {\n        return error.response.data;\n      }\n    };\n\n    this.req = req;\n  }\n\n}","map":{"version":3,"sources":["/home/inim/Documents/Data/DESA/DOMAS/client/src/api/Api.ts"],"names":["axios","jwtDecode","cookies","Api","constructor","req","api","create","baseURL","process","env","REACT_APP_BASE_URL","withCredentials","headers","interceptor","refreshToken","get","token","currentTime","Date","decodeToken","exp","getTime","refresh","post","set","defaults","error","console","log","path","id","user","data","response","params"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAIA,eAAe,MAAMC,GAAN,CAAU;AAWrBC,EAAAA,WAAW,CAACC,GAAD,EAAiB;AAAA,SATpBA,GASoB;AAAA,SARpBC,GAQoB,GARdN,KAAK,CAACO,MAAN,CAAa;AACvBC,MAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBADE;AAEvBC,MAAAA,eAAe,EAAE,IAFM;AAGvBC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHc,KAAb,CAQc;;AAAA,SAI5BC,WAJ4B,GAId,YAAY;AACtB,YAAMC,YAAY,GAAGb,OAAO,CAACc,GAAR,CAAY,cAAZ,CAArB;AACA,YAAMC,KAAK,GAAGf,OAAO,CAACc,GAAR,CAAY,OAAZ,CAAd;;AACA,UAAI;AACA,cAAME,WAAW,GAAG,IAAIC,IAAJ,EAApB;AACA,cAAMC,WAAsB,GAAGnB,SAAS,CAACgB,KAAD,CAAxC;;AACA,YAAIG,WAAW,CAACC,GAAZ,GAAkB,IAAnB,GAA2BH,WAAW,CAACI,OAAZ,EAA9B,EAAoD;AAChD,gBAAMC,OAAY,GAAG,MAAM,IAAIpB,GAAJ,CAAQ;AAAEY,YAAAA;AAAF,WAAR,EAA0BS,IAA1B,CAA+B,QAA/B,CAA3B;AACAtB,UAAAA,OAAO,CAACuB,GAAR,CAAY,OAAZ,EAAqBF,OAAO,CAACN,KAA7B;AACA,eAAKX,GAAL,CAASoB,QAAT,CAAkBb,OAAlB,CAA0B,eAA1B,IAA8C,UAASU,OAAO,CAACN,KAAM,EAArE;AACH;AACJ,OARD,CAQE,OAAOU,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAa,GAAEF,KAAM,EAArB;AACH;AACJ,KAlB2B;;AAAA,SAoB5BX,GApB4B,GAoBtB,MAAOc,IAAP,IAAwB;AAC1B,UAAI;AAEA,cAAM;AAAEC,UAAAA;AAAF,YAAS,KAAK1B,GAApB;;AAEA,gBAAQyB,IAAR;AACI,eAAK,OAAL;AACI,kBAAME,IAAI,GAAG,MAAM,KAAK1B,GAAL,CAASU,GAAT,CAAac,IAAb,CAAnB;AACA,mBAAOE,IAAI,CAACC,IAAZ;;AAEJ,eAAK,QAAL;AACI,kBAAMC,QAAQ,GAAG,MAAM,KAAK5B,GAAL,CAASU,GAAT,CAAac,IAAb,EAAmB;AAAEK,cAAAA,MAAM,EAAE;AAAEJ,gBAAAA;AAAF;AAAV,aAAnB,CAAvB;AACA,mBAAOG,QAAQ,CAACD,IAAhB;;AAEJ;AACI;AAVR;AAaH,OAjBD,CAiBE,OAAON,KAAP,EAAc;AACZ,eAAOA,KAAK,CAACO,QAAN,CAAeD,IAAtB;AACH;AACJ,KAzC2B;;AAAA,SA2C5BT,IA3C4B,GA2CrB,MAAOM,IAAP,IAAwB;AAC3B,UAAI;AACA,cAAMI,QAAQ,GAAG,MAAM,KAAK5B,GAAL,CAASkB,IAAT,CAAcM,IAAd,EAAoB,KAAKzB,GAAzB,CAAvB;AACA,eAAO6B,QAAQ,CAACD,IAAhB;AACH,OAHD,CAGE,OAAON,KAAP,EAAc;AACZ,eAAOA,KAAK,CAACO,QAAN,CAAeD,IAAtB;AACH;AACJ,KAlD2B;;AACxB,SAAK5B,GAAL,GAAWA,GAAX;AACH;;AAboB","sourcesContent":["import axios from 'axios'\nimport jwtDecode from 'jwt-decode'\nimport { cookies } from '../app/functions'\nimport { JWTDecode, Req } from '../interface/Interfaces'\n\n\nexport default class Api {\n    \n    private req: Req\n    private api = axios.create({\n        baseURL: process.env.REACT_APP_BASE_URL,\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\"          \n        }\n    })\n    \n    constructor(req: Req | null){ \n        this.req = req!\n    }\n\n    interceptor = async () => {\n        const refreshToken = cookies.get('refreshToken')\n        const token = cookies.get('token')\n        try {\n            const currentTime = new Date()\n            const decodeToken: JWTDecode = jwtDecode(token)\n            if((decodeToken.exp * 1000) < currentTime.getTime()){\n                const refresh: Req = await new Api({ refreshToken }).post('/token')\n                cookies.set('token', refresh.token)\n                this.api.defaults.headers['Authorization'] = `Bearer ${refresh.token}`\n            }\n        } catch (error) {\n            console.log(`${error}`)\n        }\n    }\n\n    get = async (path: string) => {\n        try {\n\n            const { id } = this.req\n\n            switch (path) {\n                case '/home':\n                    const user = await this.api.get(path)\n                    return user.data\n\n                case '/login':\n                    const response = await this.api.get(path, { params: { id } })\n                    return response.data\n            \n                default:\n                    break\n            }\n\n        } catch (error) {\n            return error.response.data\n        }\n    }\n    \n    post = async (path: string) => {\n        try {\n            const response = await this.api.post(path, this.req)\n            return response.data\n        } catch (error) {\n            return error.response.data\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}