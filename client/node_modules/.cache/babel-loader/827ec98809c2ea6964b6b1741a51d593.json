{"ast":null,"code":"import axios from 'axios';\nexport default class Api {\n  constructor(req) {\n    this.req = void 0;\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_BASE_URL,\n      withCredentials: true,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: 'Oke...'\n      }\n    });\n    this.interceptors = void 0;\n\n    this.get = async path => {\n      try {\n        const {\n          id,\n          token\n        } = this.req;\n\n        switch (path) {\n          case '/home':\n            const user = await this.api.get(path, {\n              headers: {\n                'Authorization': `Bearer ${token}`\n              }\n            });\n            return user.data;\n\n          case '/login':\n            const response = await this.api.get(path, {\n              params: {\n                id\n              }\n            });\n            return response.data;\n\n          default:\n            break;\n        }\n      } catch (error) {\n        return error.response.data;\n      }\n    };\n\n    this.post = async path => {\n      try {\n        const response = await this.api.post(path, this.req);\n        return response.data;\n      } catch (error) {\n        return error.response.data;\n      }\n    };\n\n    this.req = req;\n    this.interceptors = this.api.interceptors;\n  }\n\n}\nexport const {\n  interceptors\n} = new Api({});","map":{"version":3,"sources":["/home/inim/Documents/Data/DESA/DOMAS/client/src/api/Api.ts"],"names":["axios","Api","constructor","req","api","create","baseURL","process","env","REACT_APP_BASE_URL","withCredentials","headers","Authorization","interceptors","get","path","id","token","user","data","response","params","error","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,eAAe,MAAMC,GAAN,CAAU;AAarBC,EAAAA,WAAW,CAACC,GAAD,EAAiB;AAAA,SAXpBA,GAWoB;AAAA,SAVpBC,GAUoB,GAVdJ,KAAK,CAACK,MAAN,CAAa;AACvBC,MAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBADE;AAEvBC,MAAAA,eAAe,EAAE,IAFM;AAGvBC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELC,QAAAA,aAAa,EAAE;AAFV;AAHc,KAAb,CAUc;AAAA,SAFrBC,YAEqB;;AAAA,SAK5BC,GAL4B,GAKtB,MAAOC,IAAP,IAAwB;AAC1B,UAAI;AAEA,cAAM;AAAEC,UAAAA,EAAF;AAAMC,UAAAA;AAAN,YAAgB,KAAKd,GAA3B;;AAEA,gBAAQY,IAAR;AACI,eAAK,OAAL;AACI,kBAAMG,IAAI,GAAG,MAAM,KAAKd,GAAL,CAASU,GAAT,CAAaC,IAAb,EAAmB;AAAEJ,cAAAA,OAAO,EAAE;AAAE,iCAAkB,UAASM,KAAM;AAAnC;AAAX,aAAnB,CAAnB;AACA,mBAAOC,IAAI,CAACC,IAAZ;;AAEJ,eAAK,QAAL;AACI,kBAAMC,QAAQ,GAAG,MAAM,KAAKhB,GAAL,CAASU,GAAT,CAAaC,IAAb,EAAmB;AAAEM,cAAAA,MAAM,EAAE;AAAEL,gBAAAA;AAAF;AAAV,aAAnB,CAAvB;AACA,mBAAOI,QAAQ,CAACD,IAAhB;;AAEJ;AACI;AAVR;AAaH,OAjBD,CAiBE,OAAOG,KAAP,EAAc;AACZ,eAAOA,KAAK,CAACF,QAAN,CAAeD,IAAtB;AACH;AACJ,KA1B2B;;AAAA,SA4B5BI,IA5B4B,GA4BrB,MAAOR,IAAP,IAAwB;AAC3B,UAAI;AACA,cAAMK,QAAQ,GAAG,MAAM,KAAKhB,GAAL,CAASmB,IAAT,CAAcR,IAAd,EAAoB,KAAKZ,GAAzB,CAAvB;AACA,eAAOiB,QAAQ,CAACD,IAAhB;AACH,OAHD,CAGE,OAAOG,KAAP,EAAc;AACZ,eAAOA,KAAK,CAACF,QAAN,CAAeD,IAAtB;AACH;AACJ,KAnC2B;;AACxB,SAAKhB,GAAL,GAAWA,GAAX;AACA,SAAKU,YAAL,GAAoB,KAAKT,GAAL,CAASS,YAA7B;AACH;;AAhBoB;AAmDzB,OAAO,MAAM;AAAEA,EAAAA;AAAF,IAAmB,IAAIZ,GAAJ,CAAQ,EAAR,CAAzB","sourcesContent":["import axios from 'axios'\nimport { Req, AxiosType } from '../interface/Interfaces'\n\n\nexport default class Api {\n    \n    private req: Req\n    private api = axios.create({\n        baseURL: process.env.REACT_APP_BASE_URL,\n        withCredentials: true,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: 'Oke...'           \n        }\n    })\n    public interceptors: AxiosType\n\n    constructor(req: Req | null){ \n        this.req = req!\n        this.interceptors = this.api.interceptors\n    }\n\n    get = async (path: string) => {\n        try {\n\n            const { id, token } = this.req\n\n            switch (path) {\n                case '/home':\n                    const user = await this.api.get(path, { headers: { 'Authorization': `Bearer ${token}` } })\n                    return user.data\n\n                case '/login':\n                    const response = await this.api.get(path, { params: { id } })\n                    return response.data\n            \n                default:\n                    break\n            }\n\n        } catch (error) {\n            return error.response.data\n        }\n    }\n    \n    post = async (path: string) => {\n        try {\n            const response = await this.api.post(path, this.req)\n            return response.data\n        } catch (error) {\n            return error.response.data\n        }\n    }\n}\n\nexport const { interceptors } = new Api({})"]},"metadata":{},"sourceType":"module"}